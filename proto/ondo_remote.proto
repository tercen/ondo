syntax = "proto3";

import "google/protobuf/wrappers.proto";

package OndoRemote;

/// OndoRemote is a gRPC service providing a remote API for managing
/// database servers, domains, tables, indexes, and values.
/// The service enables interactions with a hierarchical data storage system:
/// a database server contains multiple domains, each domain contains multiple tables,
/// each table contains values and indexes, and each index contains references to values.
service OndoRemote {
    /// Version returns the version information of the server, including major, minor, and patch versions,
    /// commit hash, build date, and a list of enabled features.
    rpc Version(EmptyMessage) returns (VersionResponse) {}

    /// Database Server operations

    /// CreateDatabaseServer creates a new database server with the given configuration.
    rpc CreateDatabaseServer(DatabaseServerMessage) returns (EmptyMessage) {}
    /// DeleteDatabaseServer removes an existing database server identified by the given reference.
    rpc DeleteDatabaseServer(DatabaseServerReferenceMessage) returns (EmptyMessage) {}
    /// GetDatabaseServer retrieves the configuration of an existing database server identified by the given reference.
    rpc GetDatabaseServer(DatabaseServerReferenceMessage) returns (DatabaseServerMessage) {}
    /// UpdateDatabaseServer updates the configuration of an existing database server with the given data.
    rpc UpdateDatabaseServer(DatabaseServerMessage) returns (EmptyMessage) {}
    /// ListDomains returns a list of domain names hosted on the specified database server.
    rpc ListDomains(DatabaseServerReferenceMessage) returns (ArrayOfStringResponse) {}

    /// Domain operations

    /// CreateDomain creates a new domain with the given configuration.
    rpc CreateDomain(DomainMessage) returns (EmptyMessage) {}
    /// DeleteDomain removes an existing domain identified by the given reference.
    rpc DeleteDomain(DomainReferenceMessage) returns (EmptyMessage) {}
    /// GetDomain retrieves the configuration of an existing domain identified by the given reference.
    rpc GetDomain(DomainReferenceMessage) returns (DomainMessage) {}
    /// UpdateDomain updates the configuration of an existing domain with the given data.
    rpc UpdateDomain(DomainMessage) returns (EmptyMessage) {}
    /// ListTables returns a list of table names within the specified domain.
    rpc ListTables(DomainReferenceMessage) returns (ArrayOfStringResponse) {}

    /// Table operations

    /// CreateTable creates a new table with the given configuration.
    rpc CreateTable(TableMessage) returns (EmptyMessage) {}
    /// DeleteTable removes an existing table identified by the given reference.
    rpc DeleteTable(TableReferenceMessage) returns (EmptyMessage) {}
    /// GetTable retrieves the configuration of an existing table identified by the given reference.
    rpc GetTable(TableReferenceMessage) returns (TableMessage) {}
    /// UpdateTable updates the configuration of an existing table with the given data.
    rpc UpdateTable(TableMessage) returns (EmptyMessage) {}
    /// ListIndexes returns a list of index names associated with the specified table.
    rpc ListIndexes(TableReferenceMessage) returns (ArrayOfStringResponse) {}

    /// Table Value operations

    /// ListValues retrieves all values associated with the specified table reference.
    /// Requires a full key for efficient lookups.
    rpc ListValues(TableReferenceMessage) returns (JsonMessage) {}
    /// ListValuesByKeyPrefix retrieves all values that share the specified key prefix within a table.
    rpc ListValuesByKeyPrefix(TableValueReferenceMessage) returns (JsonMessage) {}
    /// ListValuesByIdRange retrieves all values whose keys fall within the specified range (inclusive) within a table.
    /// Also supports key prefix lookups.
    rpc ListValuesByIdRange(TableIdRangeReferenceMessage) returns (JsonMessage) {}
    /// ListValuesByIdList retrieves all values whose keys are listed in the provided list of keys within a table.
    rpc ListValuesByIdList(TableIdListReferenceMessage) returns (JsonMessage) {}

/// Index operations

/// CreateIndex creates a new index with the given configuration.
rpc CreateIndex(IndexMessage) returns (EmptyMessage) {}
/// DeleteIndex removes an existing index identified by the given reference.
rpc DeleteIndex(IndexReferenceMessage) returns (EmptyMessage) {}
/// GetIndex retrieves the configuration of an existing index identified by the given reference.
rpc GetIndex(IndexReferenceMessage) returns (IndexMessage) {}
/// UpdateIndex updates the configuration of an existing index with the given data.
rpc UpdateIndex(IndexMessage) returns (EmptyMessage) {}

/// Indexed Value operations

/// FindValues performs a key prefix search on the specified index and returns the matching values.
rpc FindValues(IndexedValueReferenceMessage) returns (JsonMessage) {}
/// FindValuesByRange retrieves all values whose indexed keys fall within the specified range (inclusive) in an index.
/// Also supports key prefix lookups.
rpc FindValuesByRange(IndexedValueRangeReferenceMessage) returns (JsonMessage) {}

/// Table Value CRUD operations

/// CreateValue creates a new value in the specified table.
/// The CreateTableValueMessage can contain an optional key sequence for efficient key prefix search (ListValuesByKeyPrefix).
rpc CreateValue(CreateTableValueMessage) returns (OndoKeyMessage) {}
/// DeleteValue removes an existing value identified by the given table value reference.
rpc DeleteValue(TableValueReferenceMessage) returns (EmptyMessage) {}
/// GetValue retrieves the value associated with the given table value reference.
rpc GetValue(TableValueReferenceMessage) returns (JsonMessage) {}
/// UpdateValue updates the value identified by the given table value reference with the new data.
rpc UpdateValue(TableValueMessage) returns (EmptyMessage) {}

/// Note: When creating a table value, the CreateTableValueMessage can have an optional key.
/// If the key is not provided, the database server will generate a key, which is a 64-bit integer.
}

message EmptyMessage {}

message VersionResponse {
     uint64 major = 1;
      uint64 minor = 2;
     uint64 patch = 3;
      string commit = 4;
      string date = 5;
      string features = 6;
}

message ArrayOfStringResponse {
    repeated string values = 1;
}

message DatabaseServerReferenceMessage {
}

message DatabaseServerMessage {
}

message DomainReferenceMessage {
    string domain_name = 1;
}

message DomainMessage {
    DomainReferenceMessage domain_reference = 1;
    /// other fields
}

message TableReferenceMessage {
    DomainReferenceMessage domain_reference = 1;
    string table_name = 2;
}

message TableMessage {
    TableReferenceMessage table_reference = 1;
    /// other fields
}

message IndexReferenceMessage {
    TableReferenceMessage table_reference = 1;
    string index_name = 2;
}

message IndexMessage {
    IndexReferenceMessage index_reference = 1;
    repeated string fields = 2;
}

message CreateTableValueReferenceMessage {
    TableReferenceMessage table_reference = 1;
    OptionalOndoKeyMessage key = 2;
}

message CreateTableValueMessage {
    CreateTableValueReferenceMessage create_table_value_reference = 1;
    string json = 2; //_id field should be included therefore we use only table_reference
}

message TableValueReferenceMessage {
    TableReferenceMessage table_reference = 1;
    OndoKeyMessage key = 2;
}

message TableValueMessage {
    TableValueReferenceMessage table_value_reference = 1;
    string json = 2; //_id field should be included therefore we use only table_reference
}

message JsonMessage {
    string json = 1;
}

message TableIdRangeReferenceMessage {
    TableReferenceMessage table_reference = 1;
    OndoKeyMessage start_key = 2;
    OndoKeyMessage end_key = 3;
}

message TableIdListReferenceMessage {
    TableReferenceMessage table_reference = 1;
    repeated OndoKeyMessage keys = 2;
}

message IndexedValueRangeReferenceMessage {
    IndexReferenceMessage index_reference = 1;
    OndoKeyMessage start_key = 2;
    OndoKeyMessage end_key = 3;
}

message IndexedValueReferenceMessage {
    IndexReferenceMessage index_reference = 1;
    OndoKeyMessage key = 2;
}

// Ondo Key 

message OndoKeyMessage {
    repeated string json_keys = 1;
}

message OptionalOndoKeyMessage {
    OndoKeyMessage ondo_key = 1;  /// Maps to Option by default
}
