syntax = "proto3";

import "google/protobuf/wrappers.proto";

package OndoRemote;

// Create, Delete, Get, Update, List
service OndoRemote {
    rpc Version(EmptyMessage) returns (VersionResponse) {}
    rpc CreateDatabaseServer(DatabaseServerMessage) returns (EmptyMessage) {}
    rpc DeleteDatabaseServer(DatabaseServerReferenceMessage) returns (EmptyMessage) {}
    rpc GetDatabaseServer(DatabaseServerReferenceMessage) returns (DatabaseServerMessage) {}
    rpc UpdateDatabaseServer(DatabaseServerMessage) returns (EmptyMessage) {}
    rpc ListDomains(DatabaseServerReferenceMessage) returns (ArrayOfStringResponse) {}

    rpc CreateDomain(DomainMessage) returns (EmptyMessage) {}
    rpc DeleteDomain(DomainReferenceMessage) returns (EmptyMessage) {}
    rpc GetDomain(DomainReferenceMessage) returns (DomainMessage) {}
    rpc UpdateDomain(DomainMessage) returns (EmptyMessage) {}
    rpc ListTables(DomainReferenceMessage) returns (ArrayOfStringResponse) {}

    rpc CreateTable(TableMessage) returns (EmptyMessage) {}
    rpc DeleteTable(TableReferenceMessage) returns (EmptyMessage) {}
    rpc GetTable(TableReferenceMessage) returns (TableMessage) {}
    rpc UpdateTable(TableMessage) returns (EmptyMessage) {}
    rpc ListIndexes(TableReferenceMessage) returns (ArrayOfStringResponse) {}

    rpc ListValues(TableReferenceMessage) returns (JsonMessage) {}
    rpc ListValuesByIdRange(TableIdRangeReferenceMessage) returns (JsonMessage) {}
    rpc ListValuesByIdList(TableIdListReferenceMessage) returns (JsonMessage) {}

    rpc CreateIndex(IndexMessage) returns (EmptyMessage) {}
    rpc DeleteIndex(IndexReferenceMessage) returns (EmptyMessage) {}
    rpc GetIndex(IndexReferenceMessage) returns (IndexMessage) {}
    rpc UpdateIndex(IndexMessage) returns (EmptyMessage) {}

    rpc CreateValue(CreateTableValueMessage) returns (OndoKeyMessage) {}
    rpc DeleteValue(TableValueReferenceMessage) returns (EmptyMessage) {}
    rpc GetValue(TableValueReferenceMessage) returns (JsonMessage) {}
    rpc UpdateValue(TableValueMessage) returns (EmptyMessage) {}

    rpc FindValues(IndexedValueReferenceMessage) returns (JsonMessage) {}
    rpc FindValuesByRange(IndexedValueRangeReferenceMessage) returns (JsonMessage) {}
}

message EmptyMessage {}

message VersionResponse {
    string version = 1;
}

message ArrayOfStringResponse {
    repeated string values = 1;
}

message DatabaseServerReferenceMessage {
}

message DatabaseServerMessage {
}

message DomainReferenceMessage {
    string domain_name = 1;
}

message DomainMessage {
    DomainReferenceMessage domain_reference = 1;
    // other fields
}

message TableReferenceMessage {
    DomainReferenceMessage domain_reference = 1;
    string table_name = 2;
}

message TableMessage {
    TableReferenceMessage table_reference = 1;
    // other fields
}

message IndexReferenceMessage {
    TableReferenceMessage table_reference = 1;
    string index_name = 2;
}

message IndexMessage {
    IndexReferenceMessage index_reference = 1;
    repeated string fields = 2;
}

message CreateTableValueReferenceMessage {
    TableReferenceMessage table_reference = 1;
    OptionalOndoKeyMessage key = 2;
}

message CreateTableValueMessage {
    CreateTableValueReferenceMessage create_table_value_reference = 1;
    string json = 2; //_id field should be included therefore we use only table_reference
}

message TableValueReferenceMessage {
    TableReferenceMessage table_reference = 1;
    OndoKeyMessage key = 2;
}

message TableValueMessage {
    TableValueReferenceMessage table_value_reference = 1;
    string json = 2; //_id field should be included therefore we use only table_reference
}

message JsonMessage {
    string json = 1;
}

message TableIdRangeReferenceMessage {
    TableReferenceMessage table_reference = 1;
    OndoKeyMessage start_key = 2;
    OndoKeyMessage end_key = 3;
}

message TableIdListReferenceMessage {
    TableReferenceMessage table_reference = 1;
    repeated OndoKeyMessage keys = 2;
}

message IndexedValueRangeReferenceMessage {
    IndexReferenceMessage index_reference = 1;
    OndoKeyMessage start_key = 2;
    OndoKeyMessage end_key = 3;
}

message IndexedValueReferenceMessage {
    IndexReferenceMessage index_reference = 1;
    OndoKeyMessage key = 2;
}

// Ondo Key 

message OndoKeyMessage {
    repeated string json_keys = 1;
}

message OptionalOndoKeyMessage {
    OndoKeyMessage ondo_key = 1;  // Maps to Option by default
}
