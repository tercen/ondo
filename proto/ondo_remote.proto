syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "status.proto";

package OndoRemote;

/// OndoRemote is a gRPC service providing a remote API for managing
/// database servers, domains, tables, indexes, and values.
/// The service enables interactions with a hierarchical data storage system:
/// a database server contains multiple domains, each domain contains multiple tables,
/// each table contains values and indexes, and each index contains references to values.
service OndoRemote {
    /// TransactionStream is a streaming RPC method that accepts a stream of transaction requests
    /// from the client and returns a stream of transaction responses. The client can send multiple
    /// requests in a single stream session and receive multiple responses as well.
    rpc TransactionStream(stream TransactionRequest) returns (stream TransactionResponse) {}
    /// Access Database without a transaction
    rpc DbStream(stream TransactionRequest) returns (stream TransactionResponse) {}
    /// Change the schema of the database. 
    rpc MetaStream(stream MetaRequest) returns (stream TransactionResponse) {}
}

message MetaRequest {
    oneof request_type {
        EmptyMessage version_request = 1;
        DatabaseServerOps database_server_ops = 2;
        DomainOps domain_ops = 3;
        TableOps table_ops = 4;
        IndexOps index_ops = 5;
        TextIndexOps text_index_ops = 6;
    }
}

message TransactionRequest {
    oneof request_type {
        TableValueOps table_value_ops = 1; 
        IndexedValueOps indexed_value_ops = 2;
        KeyPrefixOps key_prefix_ops = 3;
    }
}

// Database Server Ops
message DatabaseServerOps {
    oneof request_type {
        DatabaseServerMessage create_request = 1;
        DatabaseServerReferenceMessage delete_request = 2;
        DatabaseServerReferenceMessage get_request = 3;
        DatabaseServerMessage update_request = 4; //FIXME Should be DatabaseServerReferenceMessage
        DatabaseServerReferenceMessage list_domains_request = 5;
    }
}

// Domain Ops
message DomainOps {
    oneof request_type {
        DomainMessage create_request = 1;
        DomainReferenceMessage delete_request = 2;
        DomainReferenceMessage get_request = 3;
        DomainMessage update_request = 4;
        DomainReferenceMessage list_tables_request = 5;
    }
}

// Table Ops
message TableOps {
    oneof request_type {
        TableMessage create_request = 1;
        TableReferenceMessage delete_request = 2;
        TableReferenceMessage get_request = 3;
        TableMessage update_request = 4;
        TableReferenceMessage list_indexes_request = 5;
    }
}

// Table Value Ops
message TableValueOps {
    oneof request_type {
        CreateTableValueMessage create_request = 1;
        TableValueReferenceMessage delete_request = 2;
        TableValueReferenceMessage get_request = 3;
        TableValueMessage update_request = 4;
    }
}

// Index Ops 
message IndexOps {
    oneof request_type {
        IndexMessage create_request = 1;
        IndexReferenceMessage delete_request = 2;
        IndexReferenceMessage get_request = 3;
        IndexMessage update_request = 4;
    }
}

// Text Index Ops 
message TextIndexOps { 
    oneof request_type { 
        TextIndexMessage create_request = 1; 
        TextIndexReferenceMessage delete_request = 2; 
        TextIndexReferenceMessage get_request = 3; 
        TextIndexMessage update_request = 4; 
        TantivyQueryMessage search_request = 5; 
    } 
}

// Query: Key Prefix Ops
message KeyPrefixOps {
    oneof request_type {
        TableReferenceMessage list_values_request = 1;
        TableValueReferenceMessage list_values_by_key_prefix_request = 2;
        TableIdRangeReferenceMessage list_values_by_id_range_request = 3;
        TableIdListReferenceMessage list_values_by_id_list_request = 4;
    }
}

// Query: Indexed Value Ops 
message IndexedValueOps { 
    oneof request_type { 
        IndexedValueReferenceMessage find_values = 1; 
        IndexedValueRangeReferenceMessage find_values_by_range = 2; 
    } 
}


message TransactionResponse {
    oneof response_type {
      EmptyMessage empty_response = 1;
      VersionResponse version_response = 2;
      ArrayOfStringResponse array_of_string_response = 3;
      DatabaseServerMessage database_server_message = 4;
      DomainMessage domain_message = 5;
      TableMessage table_message = 6;
      IndexMessage index_message = 7;
      TextIndexMessage text_index_message = 8;
      JsonMessage json_message = 9;
      OndoKeyMessage ondo_key_message = 10;
      google.rpc.Status error_response = 11;
    }
  }

message EmptyMessage {}

message VersionResponse {
     uint64 major = 1;
      uint64 minor = 2;
     uint64 patch = 3;
      string commit = 4;
      string date = 5;
      string features = 6;
}

message ArrayOfStringResponse {
    repeated string values = 1;
}

message DatabaseServerReferenceMessage {
}

message DatabaseServerMessage {
}

message DomainReferenceMessage {
    string domain_name = 1;
}

message DomainMessage {
    DomainReferenceMessage domain_reference = 1;
    /// other fields
}

message TableReferenceMessage {
    DomainReferenceMessage domain_reference = 1;
    string table_name = 2;
}

message TableMessage {
    TableReferenceMessage table_reference = 1;
    /// other fields
}

message IndexReferenceMessage {
    TableReferenceMessage table_reference = 1;
    string index_name = 2;
}

message IndexMessage {
    IndexReferenceMessage index_reference = 1;
    repeated string fields = 2;
}

message CreateTableValueReferenceMessage {
    TableReferenceMessage table_reference = 1;
    OptionalOndoKeyMessage key = 2;
}

message CreateTableValueMessage {
    CreateTableValueReferenceMessage create_table_value_reference = 1;
    string json = 2; //_id field should be included therefore we use only table_reference
}

message TableValueReferenceMessage {
    TableReferenceMessage table_reference = 1;
    OndoKeyMessage key = 2;
}

message TableValueMessage {
    TableValueReferenceMessage table_value_reference = 1;
    string json = 2; //_id field should be included therefore we use only table_reference
}

message JsonMessage {
    string json = 1;
}

message TableIdRangeReferenceMessage {
    TableReferenceMessage table_reference = 1;
    OndoKeyMessage start_key = 2;
    OndoKeyMessage end_key = 3;
}

message TableIdListReferenceMessage {
    TableReferenceMessage table_reference = 1;
    repeated OndoKeyMessage keys = 2;
}

message IndexedValueRangeReferenceMessage {
    IndexReferenceMessage index_reference = 1;
    OndoKeyMessage start_key = 2;
    OndoKeyMessage end_key = 3;
}

message IndexedValueReferenceMessage {
    IndexReferenceMessage index_reference = 1;
    OndoKeyMessage key = 2;
}

// Ondo Key 

message OndoKeyMessage {
    repeated string json_keys = 1;
}

message OptionalOndoKeyMessage {
    OndoKeyMessage ondo_key = 1;  /// Maps to Option by default
}

// Text Index
message TextIndexReferenceMessage {
    TableReferenceMessage table_reference = 1;
    string index_name = 2;
}

message TextIndexMessage {
    TextIndexReferenceMessage text_index_reference = 1;
    repeated string fields = 2;
}

message TantivyQueryMessage {
    TextIndexReferenceMessage text_index_reference = 1;
    string query = 2;
    google.protobuf.UInt64Value optional_page_size = 3;
    google.protobuf.UInt64Value optional_page_number = 4;
}

// Async Table Value
message AsyncJsonMessage {
    uint64 request_id = 1;
    JsonMessage json_message = 2;
}

message AsyncTableValueReferenceMessage {
    uint64 request_id = 1;
    TableValueReferenceMessage table_value_reference = 2;
}
